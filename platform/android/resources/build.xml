<?xml version="1.0" encoding="UTF-8"?>
<project name="Corona Client Build" default="none" basedir=".">

	<property file="build.properties"/>

<!-- Uncomment this to test building an expansion file.
	<property name="EXPANSION_FILE_NAME" value="main.1.com.ansca.test.Corona.obb"/>
-->

	<!--
	  params for pre-build:
		TEMP_DIR = temporary directory to use
					This will also contain the .lu files
		SRC_DIR = the directory containing the source and assets
		BUNDLE_DIR = the directory of the app bundle

	  params for post-build:
		TEMP_DIR = temporary directory to use
					This will also contain the .lu files
		SRC_DIR = the directory containing the source and assets
		DST_DIR = output dir
		BUNDLE_DIR = the directory of the app bundle
		USER_APP_NAME = name of the app
		KS = key store name
		KP = pw
		KA = alias name
		AP = alias pw
		AV = Android Version, "1.5" if 1.5, etc
	-->

	<!-- matches whatever is created on the server. was dynamic, now static. -->
	<property name="APK_APP_NAME" value="MyCoronaActivity"/>

	<!-- script extension for retouch, mksnd, cpsnd -->
	<condition property="SCRIPT_EXT" value="exe">
		<os family="windows" />
	</condition>
	<property name="SCRIPT_EXT" value="sh" />
	<condition property="USE_OLD_TOUCH" value="true">
		<os family="windows" />
	</condition>
	<condition property="onWindows" value="true">
		<os family="windows" />
	</condition>

	<!--
	 File set for all Corona projects files to be copied to the APK's "assets" directory or expansion file.
	 Excludes files that are not assets.  "excludesfile.properties" is generated by create_build_properties.lua
	-->
	<sequential>
		<condition property="live.build">
			<equals arg1="${LIVE_BUILD}" arg2="YES" />
		</condition>

		<fileset dir="${SRC_DIR}" id="asset.fileset" excludesfile="${TEMP_DIR}/excludesfile.properties">
			<exclude name="**/*.lua" unless="live.build" />
			<exclude name="**/build.settings" unless="live.build" />
			<exclude name="**/Icon&#13;" />  <!-- if this is in excludesfile.properties it doesn't work -->
		</fileset>
	</sequential>

	<target name="generate-live-build-manifest" description="" if="live.build">		
		<dirname property="ManifestDirectory" file="${LIVE_BUILD_MANIFEST_FILE}"/>
		<mkdir dir="${ManifestDirectory}" />

		<taskdef name="live-gen" classname="com.coronalabs.LiveBuildManifest"/>
		<live-gen output="${LIVE_BUILD_MANIFEST_FILE}" root="${SRC_DIR}"> 
			<path>
				<fileset refid="asset.fileset" />
			</path>
		</live-gen>

		<copy file="${TEMP_DIR}/excludesfile.properties" tofile="${TEMP_DIR}/output/assets/_corona_live_build_exclude.txt" />
	</target>


	<condition property="corona.native.android" value="${BUNDLE_DIR}/../Native/Corona/android">
		<available file="${BUNDLE_DIR}/../Native/Corona/android" />
	</condition>
	<condition property="corona.native.android" value="${BUNDLE_DIR}/../../../Native/Corona/android">
		<available file="${BUNDLE_DIR}/../../../Native/Corona/android" />
	</condition>
	<condition property="corona.native.android" value="${BUNDLE_DIR}/../../../../../android">
		<available file="${BUNDLE_DIR}/../../../../../android" />
	</condition>
	<condition property="corona.native.android" value="${user.home}/Library/Application Support/Corona/Native/Corona/android">
		<available file="${user.home}/Library/Application Support/Corona/Native/Corona/android" />
	</condition>	
	<target name="check-gradle-bundle">
		<available file="${corona.native.android}/resource/android-template.zip" property="gradle.bundle.exists"/>
	</target>
	<target name="setup-gradle-builds" depends="check-gradle-bundle">
		<sequential>
			<delete dir="${TEMP_DIR}/template"/>
			<unzip src="${corona.native.android}/resource/android-template.zip" dest="${TEMP_DIR}" />
			<chmod file="${TEMP_DIR}/template/gradlew" perm="a+x" />
			<chmod file="${TEMP_DIR}/template/setup.sh" perm="a+x" />
			<copy todir="${TEMP_DIR}/template/app/libs">
				<fileset dir="${corona.native.android}/lib/gradle/"/>
			</copy>
		</sequential>
	</target>

	<!-- Creates an "input.zip" file to be sent to the build server, requesting it to send us an APK template. -->
	<target name="build-input-zip" depends="generate-live-build-manifest,setup-gradle-builds">
		<property name="USER_ZIP" value="${TEMP_DIR}/input.zip"/>
		<zip destfile="${USER_ZIP}" basedir="${TEMP_DIR}" encoding="UTF8" excludes="resource.car" />
	</target>

	<!-- Extracts all files from the pre-built APK template to a temporary directory. -->
	<target name="unzip-apk-template">
		<!-- Unzip the "output.zip" file received from Corona Labs' server. This contains the APK template. -->
		<unzip src="${TEMP_DIR}/output.zip" dest="${TEMP_DIR}" />

		<!-- Extract the pre-built APK template's to a temporary directory. -->
		<unzip src="${TEMP_DIR}/template.apk" dest="${TEMP_DIR}/output" />
	</target>

	<!-- Determines if the Corona project directory contains at least one application icon. -->
	<target name="find-main-application-icons">
		<condition property="corona.icon.application.main.exists">
			<or>
				<available file="${SRC_DIR}/Icon-xxxhdpi.png"/>
				<available file="${SRC_DIR}/Icon-xxhdpi.png"/>
				<available file="${SRC_DIR}/Icon-xhdpi.png"/>
				<available file="${SRC_DIR}/Icon-hdpi.png"/>
				<available file="${SRC_DIR}/Icon-mdpi.png"/>
				<available file="${SRC_DIR}/Icon-ldpi.png"/>
			</or>
		</condition>
	</target>

	<!-- Determines if the Corona project directory contains an Android TV application banner. -->
	<target name="find-main-application-banner">
		<condition property="corona.banner.application.main.exists">
			<available file="${SRC_DIR}/Banner-xhdpi.png"/>
		</condition>
	</target>

	<!-- Determines if the Corona project directory contains an Ouya application icon. -->
	<target name="find-ouya-application-icon">
		<condition property="corona.icon.application.ouya.exists">
			<available file="${SRC_DIR}/Icon-ouya.png"/>
		</condition>
	</target>

	<!-- Determines if the Corona project directory contains an Ouya Xiaomi application icon. -->
	<target name="find-ouya-xiaomi-application-icon">
		<condition property="corona.icon.application.ouya.xiaomi.exists">
			<available file="${SRC_DIR}/Icon-ouya-xiaomi.png"/>
		</condition>
	</target>

	<!-- Determines if the Corona project directory contains at least one default notification icon. -->
	<target name="find-default-notification-icons">
		<condition property="corona.icon.notification.default.exists">
			<or>
				<available file="${SRC_DIR}/IconNotificationDefault-xxxhdpi-v11.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-xxhdpi-v11.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-xhdpi.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-xhdpi-v9.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-xhdpi-v11.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-hdpi.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-hdpi-v9.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-hdpi-v11.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-mdpi.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-mdpi-v9.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-mdpi-v11.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-ldpi.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-ldpi-v9.png"/>
				<available file="${SRC_DIR}/IconNotificationDefault-ldpi-v11.png"/>
			</or>
		</condition>
	</target>

	<!-- Copies one file. Will not generate a warning/error if the source file does not exist. -->
	<target name="copy-file" depends="can-copy-file" if="can.copy.file">
		<copy file="${source.file}" tofile="${target.file}" overwrite="true" failonerror="false"/>
	</target>
	<target name="can-copy-file">
		<condition property="can.copy.file">
			<available file="${source.file}"/>
		</condition>
	</target>

	<!-- Deletes one file. Will not generate a warning/error if the source file does not exist. -->
	<target name="delete-file" depends="can-delete-file" if="can.delete.file">
		<delete file="${target.file}" failonerror="false"/>
	</target>
	<target name="can-delete-file">
		<condition property="can.delete.file">
			<available file="${target.file}"/>
		</condition>
	</target>

	<!-- Task used to replace the APK's resource files. -->
	<macrodef name="copy-res-file">
		<attribute name="source"/>
		<attribute name="target"/>
		<attribute name="target-res-dir"/>
		<attribute name="extension" default="png"/>
		<attribute name="dpi" default=""/>
		<attribute name="version" default=""/>
		<attribute name="fallback-dpi" default=""/>
		<attribute name="fallback-version" default=""/>
		<sequential>
			<!-- First attempt to copy over fallback icons in case the given does not exist. -->
			<antcall target="copy-file" inheritAll="false">
				<param name="source.file" value="${SRC_DIR}/@{source}@{fallback-dpi}.@{extension}"/>
				<param name="target.file"
				       value="${TEMP_DIR}/output/res/@{target-res-dir}@{dpi}@{version}/@{target}.@{extension}"/>
			</antcall>
			<antcall target="copy-file" inheritAll="false">
				<param name="source.file"
				       value="${SRC_DIR}/@{source}@{fallback-dpi}@{fallback-version}.@{extension}"/>
				<param name="target.file"
				       value="${TEMP_DIR}/output/res/@{target-res-dir}@{dpi}@{version}/@{target}.@{extension}"/>
			</antcall>
			<antcall target="copy-file" inheritAll="false">
				<param name="source.file" value="${SRC_DIR}/@{source}@{fallback-dpi}@{version}.@{extension}"/>
				<param name="target.file"
				       value="${TEMP_DIR}/output/res/@{target-res-dir}@{dpi}@{version}/@{target}.@{extension}"/>
			</antcall>
			<antcall target="copy-file" inheritAll="false">
				<param name="source.file" value="${SRC_DIR}/@{source}@{dpi}.@{extension}"/>
				<param name="target.file"
				       value="${TEMP_DIR}/output/res/@{target-res-dir}@{dpi}@{version}/@{target}.@{extension}"/>
			</antcall>
			<antcall target="copy-file" inheritAll="false">
				<param name="source.file" value="${SRC_DIR}/@{source}@{dpi}@{fallback-version}.@{extension}"/>
				<param name="target.file"
				       value="${TEMP_DIR}/output/res/@{target-res-dir}@{dpi}@{version}/@{target}.@{extension}"/>
			</antcall>

			<!-- Copy the given file over the APK's file. -->
			<antcall target="copy-file" inheritAll="false">
				<param name="source.file" value="${SRC_DIR}/@{source}@{dpi}@{version}.@{extension}"/>
				<param name="target.file"
				       value="${TEMP_DIR}/output/res/@{target-res-dir}@{dpi}@{version}/@{target}.@{extension}"/>
			</antcall>

			<!-- Trigger a build failure if failed to copy over the resource file. -->
			<available file="${TEMP_DIR}/output/res/@{target-res-dir}@{dpi}@{version}/@{target}.@{extension}"
			           property="copy.@{target-res-dir}.file.@{dpi}.@{version}.@{target}.@{extension}.exists"/>
			<fail message="Missing required file: @{source}@{dpi}@{version}.@{extension}"
			      unless="copy.@{target-res-dir}.file.@{dpi}.@{version}.@{target}.@{extension}.exists"/>
		</sequential>
	</macrodef>

	<!-- Task used to replace the APK's drawable resource files. -->
	<macrodef name="copy-drawable-file">
		<attribute name="source"/>
		<attribute name="target"/>
		<attribute name="extension" default="png"/>
		<attribute name="dpi" default=""/>
		<attribute name="version" default=""/>
		<attribute name="fallback-dpi" default=""/>
		<attribute name="fallback-version" default=""/>
		<sequential>
			<copy-res-file source="@{source}" target="@{target}"
							 target-res-dir="drawable" extension="@{extension}"
							 dpi="@{dpi}" version="@{version}"
							 fallback-dpi="@{fallback-dpi}" fallback-version="@{fallback-version}" />
		</sequential>
	</macrodef>

	<!-- Task used to replace the APK's mipmap resource files. -->
	<macrodef name="copy-mipmap-file">
		<attribute name="source"/>
		<attribute name="target"/>
		<attribute name="extension" default="png"/>
		<attribute name="dpi" default=""/>
		<attribute name="version" default=""/>
		<attribute name="fallback-dpi" default=""/>
		<attribute name="fallback-version" default=""/>
		<sequential>
			<copy-res-file source="@{source}" target="@{target}"
							 target-res-dir="mipmap" extension="@{extension}"
							 dpi="@{dpi}" version="@{version}"
							 fallback-dpi="@{fallback-dpi}" fallback-version="@{fallback-version}" />
		</sequential>
	</macrodef>

	<!-- Replaces all DPI versions of one notification icon in the APK with the given one. -->
	<macrodef name="copy-notification-icon">
		<!-- Set to the name of the icon file to use, without the path and extension. -->
		<attribute name="source"/>
		<!-- Set to the name of the resource file to replace, without the path and extension. -->
		<attribute name="target"/>
		<sequential>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xxxhdpi" fallback-dpi="-hdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xxxhdpi" fallback-dpi="-xhdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xxxhdpi" fallback-dpi="-xxhdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xxhdpi" fallback-dpi="-hdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xxhdpi" fallback-dpi="-xhdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xhdpi" fallback-dpi="-hdpi" version="-v4"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xhdpi" fallback-dpi="-hdpi" version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-xhdpi" fallback-dpi="-hdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-hdpi" version="-v4"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-hdpi" version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-hdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-mdpi" version="-v4"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-mdpi" version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-mdpi" version="-v11" fallback-version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-ldpi" version="-v4"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-ldpi" version="-v9"/>
			<copy-drawable-file source="@{source}" target="@{target}"
			                    dpi="-ldpi" version="-v11" fallback-version="-v9"/>
		</sequential>
	</macrodef>

	<!-- Replace the APK's main application icons with the ones provided in the Corona project. -->
	<target name="insert-main-application-icons"
	        depends="find-main-application-icons"
	        if="corona.icon.application.main.exists">
		<delete>
			<fileset dir="${TEMP_DIR}/output/res" includes="**/icon.png"/>
		</delete>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-xxxhdpi" fallback-dpi="-hdpi"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-xxxhdpi" fallback-dpi="-xhdpi"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-xxxhdpi" fallback-dpi="-xxhdpi"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-xxhdpi" fallback-dpi="-hdpi"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-xxhdpi" fallback-dpi="-xhdpi"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-xhdpi" fallback-dpi="-hdpi"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-hdpi" fallback-dpi="none"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-mdpi" fallback-dpi="none"/>
		<copy-mipmap-file source="Icon" target="icon" version="-v4" dpi="-ldpi" fallback-dpi="none"/>
	</target>

	<!-- Replace the APK's application banner with the one provided in the Corona project. -->
	<target name="insert-main-application-banner"
	        depends="find-main-application-banner"
	        if="corona.banner.application.main.exists">
		<!-- Replace Corona's default application banner. -->
		<delete>
			<fileset dir="${TEMP_DIR}/output/res" includes="**/banner.png"/>
		</delete>
		<antcall target="copy-file" inheritAll="false">
			<param name="source.file" value="${SRC_DIR}/Banner-xhdpi.png"/>
			<param name="target.file" value="${TEMP_DIR}/output/res/drawable-xhdpi-v4/banner.png"/>
		</antcall>

		<!-- Trigger a build failure if failed to copy over the resource file. -->
		<available file="${TEMP_DIR}/output/res/drawable-xhdpi-v4/banner.png"
		           property="inserted.main.application.banner.exists"/>
		<fail message="Failed to insert file: Banner-xhdpi.png"
		      unless="inserted.main.application.banner.exists"/>
	</target>

	<!-- Replace the APK's Ouya application icon with the one provided in the Corona project. -->
	<target name="insert-ouya-application-icon"
	        depends="find-ouya-application-icon"
	        if="corona.icon.application.ouya.exists">
		<!-- Replace Corona's default Ouya application icon. -->
		<delete>
			<fileset dir="${TEMP_DIR}/output/res" includes="**/ouya_icon.png"/>
		</delete>
		<antcall target="copy-file" inheritAll="false">
			<param name="source.file" value="${SRC_DIR}/Icon-ouya.png"/>
			<param name="target.file" value="${TEMP_DIR}/output/res/drawable-xhdpi-v4/ouya_icon.png"/>
		</antcall>

		<!-- Trigger a build failure if failed to copy over the resource file. -->
		<available file="${TEMP_DIR}/output/res/drawable-xhdpi-v4/ouya_icon.png"
		           property="inserted.ouya.application.icon.exists"/>
		<fail message="Failed to insert file: Icon-ouya.png"
		      unless="inserted.ouya.application.icon.exists"/>
	</target>

	<!-- Replace the APK's Ouya Xiaomi application icon with the one provided in the Corona project. -->
	<target name="insert-ouya-xiaomi-application-icon"
	        depends="find-ouya-xiaomi-application-icon"
	        if="corona.icon.application.ouya.xiaomi.exists">
		<!-- Replace Corona's default Xiaomi Ouya application icon, if available. -->
		<delete>
			<fileset dir="${TEMP_DIR}/output/res" includes="**/ouya_xiaomi_icon.png"/>
		</delete>
		<antcall target="copy-file" inheritAll="false">
			<param name="source.file" value="${SRC_DIR}/Icon-ouya-xiaomi.png"/>
			<param name="target.file" value="${TEMP_DIR}/output/res/drawable-xhdpi-v4/ouya_xiaomi_icon.png"/>
		</antcall>

		<!-- Trigger a build failure if failed to copy over the resource file. -->
		<available file="${TEMP_DIR}/output/res/drawable-xhdpi-v4/ouya_xiaomi_icon.png"
		           property="inserted.ouya.xiaomi.application.icon.exists"/>
		<fail message="Failed to insert file: Icon-ouya-xiaomi.png"
		      unless="inserted.ouya.xiaomi.application.icon.exists"/>
	</target>

	<!-- Replace the APK's default notification icons with the ones provided in the Corona project. -->
	<target name="insert-default-notification-icons"
	        depends="find-default-notification-icons"
	        if="corona.icon.notification.default.exists">
		<delete>
			<fileset dir="${TEMP_DIR}/output/res" includes="**/corona_statusbar_icon_default.png"/>
		</delete>
		<copy-notification-icon source="IconNotificationDefault" target="corona_statusbar_icon_default"/>
	</target>

	<!-- Replace resource files in the APK if provided in the Corona project directory. -->
	<target name="insert-assets-multi-icon">
		<!-- Replace the APK's application icons and banners. -->
		<antcall target="insert-main-application-icons" inheritAll="true" inheritRefs="true"/>
		<antcall target="insert-main-application-banner" inheritAll="true" inheritRefs="true"/>
		<antcall target="insert-ouya-application-icon" inheritAll="true" inheritRefs="true"/>
		<antcall target="insert-ouya-xiaomi-application-icon" inheritAll="true" inheritRefs="true"/>

		<!-- Replace the APK's notification icons. -->
		<antcall target="insert-default-notification-icons" inheritAll="true" inheritRefs="true"/>
	</target>

	<!-- Copies asset files from the Corona project to the APK's "assets" directory if not using expansion files. -->
	<target name="copy-apk-assets" unless="EXPANSION_FILE_NAME">
		<copy todir="${TEMP_DIR}/output/assets/${LIVE_BUILD_ASSET_DIR}" overwrite="true">
			<fileset refid="asset.fileset"/>
		</copy>
	</target>

	<!-- This implements the build.settings "android.apkFiles" directive -->
	<target name="copy-files-to-apk">
		<fileset dir="${SRC_DIR}" id="copy-files-to-apk.fileset" includesfile="${TEMP_DIR}/copy-files-to-apk.properties"/>
		<copy todir="${TEMP_DIR}/output/" overwrite="true" failonerror="true" verbose="true">
			<fileset refid="copy-files-to-apk.fileset"/>
		</copy>
	</target>

	<!-- Digitally signs an APK. Expected to be called by the "build-signed-apk" target. -->
	<target name="sign-apk" depends="sign-apk-auto">
		<fail unless="corona.apk.was.signed" message="Failed to sign the APK."/>
	</target>
	<target name="sign-apk-md5" unless="corona.apk.was.signed">
		<antcall target="delete-file" inheritAll="false">
			<param name="target.file" value="${TEMP_DIR}/${APK_APP_NAME}-signed.apk"/>
		</antcall>
		<exec executable="jarsigner"
			  dir="${TEMP_DIR}"
			  failonerror="false"
			  resultproperty="sign.apk.md5">
			<arg value="-signedjar"/>
			<arg value="${APK_APP_NAME}-signed.apk"/>
			<arg value="-keystore"/>
			<arg value="${KS}"/>
			<arg value="-storepass"/>
			<arg value="${KP}"/>
			<arg value="-sigalg"/>
			<arg value="MD5withRSA"/>
			<arg value="-digestalg"/>
			<arg value="SHA1"/>
			<arg value="${APK_APP_NAME}-unsigned.apk"/>
			<arg value="${KA}"/>
		</exec>
		<condition property="corona.apk.was.signed">
			<equals arg1="${sign.apk.md5}" arg2="0"/>
		</condition>
	</target>
	<target name="sign-apk-sha1" depends="sign-apk-md5" unless="corona.apk.was.signed">
		<antcall target="delete-file" inheritAll="false">
			<param name="target.file" value="${TEMP_DIR}/${APK_APP_NAME}-signed.apk"/>
		</antcall>
		<exec executable="jarsigner"
			  dir="${TEMP_DIR}"
			  failonerror="false"
			  resultproperty="sign.apk.sha1">
			<arg value="-signedjar"/>
			<arg value="${APK_APP_NAME}-signed.apk"/>
			<arg value="-keystore"/>
			<arg value="${KS}"/>
			<arg value="-storepass"/>
			<arg value="${KP}"/>
			<arg value="-sigalg"/>
			<arg value="SHA1withDSA"/>
			<arg value="-digestalg"/>
			<arg value="SHA1"/>
			<arg value="${APK_APP_NAME}-unsigned.apk"/>
			<arg value="${KA}"/>
		</exec>
		<condition property="corona.apk.was.signed">
			<equals arg1="${sign.apk.sha1}" arg2="0"/>
		</condition>
	</target>
	<target name="sign-apk-auto" depends="sign-apk-sha1" unless="corona.apk.was.signed">
		<antcall target="delete-file" inheritAll="false">
			<param name="target.file" value="${TEMP_DIR}/${APK_APP_NAME}-signed.apk"/>
		</antcall>
		<exec executable="jarsigner"
			  dir="${TEMP_DIR}"
			  resultproperty="sign.apk.auto">
			<arg value="-signedjar"/>
			<arg value="${APK_APP_NAME}-signed.apk"/>
			<arg value="-keystore"/>
			<arg value="${KS}"/>
			<arg value="-storepass"/>
			<arg value="${KP}"/>
			<arg value="-digestalg"/>
			<arg value="SHA1"/>
			<arg value="${APK_APP_NAME}-unsigned.apk"/>
			<arg value="${KA}"/>
		</exec>
		<condition property="corona.apk.was.signed">
			<equals arg1="${sign.apk.auto}" arg2="0"/>
		</condition>		
	</target>

	<!-- Creates an unsigned APK file with the given Corona project's assets and pre-built APK template. -->
	<target name="build-unsigned-apk" depends="unzip-apk-template">
		<!-- Copy all asset files from the Corona project to the APK's "assets" directory. -->
		<antcall target="copy-apk-assets" inheritAll="true" inheritRefs="true"/>

		<!-- Copy named asset files from the Corona project to the APK's root directory. -->
		<antcall target="copy-files-to-apk" inheritAll="true" inheritRefs="true"/>

		<!-- Copy the Corona project's icons to the APK's resource directories. -->
		<antcall target="insert-assets-multi-icon" />
		
		<!-- Create the APK file, which is really just a zip file. -->
    	<!-- do not use buggy Ant zip, its result will be later rejected by jarsigner -->
		<!--zip destfile="${TEMP_DIR}/${APK_APP_NAME}-unsigned.apk"-->
    		<!--zipfileset dir="${TEMP_DIR}/output" /-->
    	<!--/zip-->
    	<echo > "creating unsigned.apk" </echo>
    	<exec executable="jar"
			  dir="${TEMP_DIR}"
			  failonerror="false"
			  resultproperty="sign.apk.via.command.line.result">
      	<arg value="c0fM"/>
      	<arg value="${TEMP_DIR}/${APK_APP_NAME}-unsigned.apk"/>
      	<arg value="-C"/>
      	<arg value="${TEMP_DIR}/output"/>
      	<arg value="./"/>
    	</exec>

	</target>

	<!-- Creates a signed APK file with the given Corona project's assets and pre-built APK template. -->
	<target name="build-signed-apk" depends="build-unsigned-apk">
		<!-- Create a digitally signed APK file from the unsigned APK file. -->
		<antcall target="sign-apk" inheritAll="true" inheritRefs="true"/>

		<!-- Zip align the signed APK file. -->
		<exec executable="${BUNDLE_DIR}/zipalign" dir="${TEMP_DIR}">
			<arg value="-f" />
			<arg value="4" />
			<arg value="${APK_APP_NAME}-signed.apk" />
			<arg value="${APK_APP_NAME}-signed-aligned.apk" />
		</exec>
	</target>

	<!-- Creates a Google Play expansion file if the "EXPANSION_FILE_NAME" property was set. -->
	<target name="build-expansion-file" if="EXPANSION_FILE_NAME">
		<zip destfile="${TEMP_DIR}/${EXPANSION_FILE_NAME}" encoding="UTF8" compress="false">
			<fileset refid="asset.fileset"/>
		</zip>
	</target>

	<!-- Copies the signed APK, and expansion file if enabled, to the destination directory. -->
	<target name="copy-apk-to" if="DST_DIR" unless="onWindows">
		<copy file="${TEMP_DIR}/${APK_APP_NAME}-signed-aligned.apk"
			  tofile="${DST_DIR}/${USER_APP_NAME}.apk"
			  overwrite="true" failonerror="true"/>
	</target>
	
	<target name="copy-to" if="DST_DIR" depends="copy-apk-to">
		<antcall target="copy-file" inheritAll="false">
			<param name="source.file" value="${TEMP_DIR}/${EXPANSION_FILE_NAME}"/>
			<param name="target.file" value="${DST_DIR}/${EXPANSION_FILE_NAME}"/>
		</antcall>
	</target>

	<!-- Creates a signed APK file from a pre-built APK template containing no assets. -->
	<target name="build" depends="build-signed-apk,build-expansion-file,copy-to" />

	<!-- 
	  Test sign a jar to see if we have a valid PW
	  params:
		  TEMP_DIR = temporary directory to use
		  BUNDLE_DIR = the directory containing _coronatest.jar
		  KS = key store name
		  KP = pw
		  KA = alias name
		  AP = alias pw
	  -->
	<target name="test-sign">
		<copy
			tofile="${TEMP_DIR}/_coronatest.jar"
			file="${BUNDLE_DIR}/_coronatest.jar"
			overwrite="true"/>
		<signjar
			jar="${TEMP_DIR}/_coronatest.jar"
			signedjar="${TEMP_DIR}/_coronatest-signed.jar"
			alias="${KA}"
			storepass="${KP}"
			keystore="${KS}"
			keypass="${AP}"
		/>

	</target>
</project>
