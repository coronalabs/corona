name: Daily Build

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      buildNumber:
        description: 'Build Number'
        required: true
        default: '9999'
      buildYear:
        description: 'Build Year'
        required: true
        default: '2100'


env:
  WORKSPACE: ${{ github.workspace }}
  DEVELOPER_DIR: /Applications/Xcode_13.1.app/Contents/Developer
  BUILD_NUMBER: ${{ github.event.inputs.buildNumber }}
  YEAR: ${{ github.event.inputs.buildYear }}

jobs:
  source-code:
    name: Check out and process source code
    if: "!contains(github.ref, 'refs/tags/') || github.repository == 'coronalabs/corona'"
    runs-on: macos-11.0
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: ./tools/GHAction/daily_env.sh
      - name: Set daily build
        run: ./tools/GHAction/process_sources.sh
      - name: Upload Source bundle
        uses: actions/upload-artifact@v1
        with:
          name: SourceCode
          path: ./output

  linux:
    needs:
      - source-code
    runs-on: ubuntu-20.04
    # container:
    #   image: coronalabs/linux_builder_rpi
    steps:
      #- name: Install dependencies
      #  run: |
          # The Linux and macOS virtual machines both run using passwordless sudo
          #sudo apt-get update
          #sudo apt-get install -y cmake build-essential dos2unix libwxgtk3.0-gtk3-dev zlib1g-dev libgl1-mesa-dev libglu1-mesa-dev libopenal-dev libfreetype6-dev libpng-dev libcrypto++-dev
          #sudo apt-get install -y libcurl4-openssl-dev libpng-dev libjpeg-dev libssl-dev libvorbis-dev libogg-dev uuid-dev zlib1g-dev 
          #sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
          #sudo apt-get install -y libgtk-3-dev
          # install wxWidgets-3.1.4
          #wxurl=https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.4/wxWidgets-3.1.4.tar.bz2
          #wxtar=~/wxWidgets-3.1.4.tar.bz2
          #if [ -f "$wxtar" ]; then
          #  echo "Using existing wxWidgets"
          #else
          #  wget "$wxurl" -O "$wxtar"
          #  tar -xf "$wxtar" -C ~/
          #  cd ~/wxWidgets-3.1.4
          #  mkdir buildgtk
          #  cd buildgtk
          #  ../configure --with-gtk
          #  make -j4
          #  sudo make install
          #fi
      - name: Build binaries
        run: |
          #cd "${WORKSPACE}"
          #ls
          rm -rf build
          mkdir build
          cd build
          cmake ..
          make -j4
      # - name: Get processed code
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: SourceCode
      # - name: Unpack source code
      #   run: tar -xzf SourceCode/corona.tgz
      # - run: ./tools/GHAction/daily_env.sh
      # - name: Build linux binaries
      #   working-directory: ./platform/linux
      #   run: ./build_native_linux.sh
      # - name: Copy result to output
      #   run: |
      #     mkdir -p output
      #     cp -v platform/linux/linuxtemplate.tar.gz output
      #     cp -v platform/linux/raspbiantemplate.tar.gz output
      #     cp -v platform/linux/CoronaSimulator-x86-64.tar.gz output
      #- name: Fake outputs
      #  run: |
      #    mkdir -p output
      #    touch output/linuxtemplate.tar.gz
      #    touch output/raspbiantemplate.tar.gz
      #    touch output/CoronaSimulator-x86-64.tar.gz
      #- name: Upload webtemplate artifact
      #  uses: actions/upload-artifact@v2-preview
      #  with:
      #    name: Linux-Templates
      #    path: ./output/*template.tar.gz
      #- name: Upload Linux Simulatory artifact
      #  uses: actions/upload-artifact@v2-preview
      #  with:
      #    name: Simulator-Linux
      #    path: ./output/CoronaSimulator*

