name: Daily Build

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      buildNumber:
        description: 'Build Number'
        required: true
        default: '9999'
      buildYear:
        description: 'Build Year'
        required: true
        default: '2100'


env:
  WORKSPACE: ${{ github.workspace }}
  DEVELOPER_DIR: /Applications/Xcode_13.1.app/Contents/Developer
  BUILD_NUMBER: ${{ github.event.inputs.buildNumber }}
  YEAR: ${{ github.event.inputs.buildYear }}

jobs:
  source-code:
    name: Check out and process source code
    if: "!contains(github.ref, 'refs/tags/') || github.repository == 'coronalabs/corona'"
    runs-on: macos-11.0
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: ./tools/GHAction/daily_env.sh
      - name: Set daily build
        run: ./tools/GHAction/process_sources.sh
      - name: Upload Source bundle
        uses: actions/upload-artifact@v1
        with:
          name: SourceCode
          path: ./output

  webtemplate:
    needs:
      - source-code
    runs-on: macos-11.0
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Set up emsdk
        run: |
          wget -q --header='Accept:application/octet-stream' https://github.com/coronalabs/emsdk/releases/download/e2.0.34/emsdk.tar.xz -O emsdk.tar.xz
          tar -xjf emsdk.tar.xz -C ~/
          xattr -r -d com.apple.quarantine ~/emsdk || true
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build webtemplate
        working-directory: ./platform/emscripten/gmake
        run: |
          source ~/emsdk/emsdk_env.sh
          ./build_template.sh
      - name: Copy result to output
        run: |
          mkdir -p output
          cp -v platform/emscripten/webtemplate.zip output
      - name: Upload webtemplate artifact
        uses: actions/upload-artifact@v1
        with:
          name: Webtemplate
          path: ./output

  linux:
    needs:
      - source-code
    runs-on: ubuntu-20.04
    # container:
    #   image: coronalabs/linux_builder_rpi
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh      
      - name: Install dependencies
        run: |
          # The Linux and macOS virtual machines both run using passwordless sudo
          sudo apt-get update
          sudo apt-get install -y cmake build-essential dos2unix libwxgtk3.0-gtk3-dev zlib1g-dev libgl1-mesa-dev libglu1-mesa-dev libopenal-dev libfreetype6-dev libpng-dev libcrypto++-dev
          sudo apt-get install -y libcurl4-openssl-dev libpng-dev libjpeg-dev libssl-dev libvorbis-dev libogg-dev uuid-dev zlib1g-dev 
          sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libwebkit2gtk-4.0-dev libgtk-3-dev
          TEMP_DEB="$(mktemp)" &&
          wget -O "$TEMP_DEB" 'http://mirrors.kernel.org/ubuntu/pool/main/r/readline/libreadline7_7.0-3_amd64.deb' &&
          sudo dpkg -i "$TEMP_DEB"
          rm -f "$TEMP_DEB"
          # install wxWidgets-3.1.4
          wxurl=https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.4/wxWidgets-3.1.4.tar.bz2
          wxtar=~/wxWidgets-3.1.4.tar.bz2
          if [ -f /usr/local/include/wx-3.1/wx/wx.h ]; then
            echo "Using existing wxWidgets"
          else
            wget "$wxurl" -O "$wxtar"
            tar -xf "$wxtar" -C ~/
            cd ~/wxWidgets-3.1.4
            mkdir buildgtk
            cd buildgtk
            ../configure --with-gtk
            make -j4
            sudo make install
          fi
      - name: Build binaries
        run: |
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=/tmp/Solar2D ..
          make -j4
          make install
      - name: Copy results to output
        run: |
         mkdir -p output
         cd /tmp/Solar2D/bin
         tar -czvf "${WORKSPACE}"/output/CoronaSimulator-x86-64.tgz ./
         cd Solar2D/Resources
         cp -v /tmp/Solar2D/bin/Solar2D/Resources/linuxtemplate_x64.tgz "${WORKSPACE}"/output
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
      - name: Build snap
        run: |
          mkdir -p platform/linux/snapcraft/bin
          cp -Rv /tmp/Solar2D/bin/Solar2D/* platform/linux/snapcraft/bin
          mkdir -p platform/linux/snapcraft/usr/local/lib
          mkdir -p platform/linux/snapcraft/usr/local/lib/wx
          cp -Rv /usr/local/lib/libwx* platform/linux/snapcraft/usr/local/lib
          cp -Rv /usr/local/lib/wx/* platform/linux/snapcraft/usr/local/lib/wx
          mkdir -p platform/linux/snapcraft/usr/local/share/aclocal
          mkdir -p platform/linux/snapcraft/usr/local/share/locale
          cp -Rv /usr/local/share/aclocal/wx* platform/linux/snapcraft/usr/local/share/aclocal
          cp --parents `find /usr/local/share/locale -name 'wx*'` platform/linux/snapcraft
          mkdir -p platform/linux/snapcraft/usr/local/bin
          cp -Rv /usr/local/bin/wx* platform/linux/snapcraft/usr/local/bin
          cd platform/linux/snapcraft/usr/local/bin
          ln -sf ../lib/wx/config/gtk3-unicode-3.1 wx-config
          cd ../../../
          sudo snapcraft --use-lxd
          cp -v *.snap "${WORKSPACE}"/output
      - name: Upload Linux-Template
        uses: actions/upload-artifact@v2-preview
        with:
          name: Linux-Template
          path: ./output/linuxtemplate_x64.tgz
      - name: Upload Linux Linux-Simulator-Template
        uses: actions/upload-artifact@v2-preview
        with:
          name: Linux-Simulator-Template
          path: ./output/CoronaSimulator*
      - name: Upload snap
        uses: actions/upload-artifact@v2-preview
        with:
          name: Snap
          path: ./output/*.snap

  native:
    needs: source-code
    runs-on: macos-11.0
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build Native
        run: ./tools/GHAction/build_native.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload Corona Native
        uses: actions/upload-artifact@v1
        with:
          name: Native
          path: ./output

  Linux-Simulator:
    needs:
      - native
      - webtemplate
      - linux
    runs-on: ubuntu-20.04
    steps:
      - name: Get Linux Simulator template
        uses: actions/download-artifact@v1
        with:
          name: Linux-Simulator-Template
      - name: Get Webtemplate
        uses: actions/download-artifact@v1
        with:
          name: Webtemplate
      - name: Get Native
        uses: actions/download-artifact@v1
        with:
          name: Native
      - name: Unpack CoronaSimulator tgz
        run: |
          mkdir simulator
          tar -xvzf Linux-Simulator-Template/CoronaSimulator-x86-64.tgz -C simulator
      - name: Put webtemplate in place
        run: cp -v Webtemplate/webtemplate.zip simulator/Solar2D/Resources/
      - name: Put Android resources in place
        run: |
          tar -xvzf Native/CoronaNative.tar.gz CoronaEnterprise/Corona/android/resource/android-template.zip          
          mkdir -p simulator/Solar2D/Resources/Native/Corona/android/resource
          cp -v CoronaEnterprise/Corona/android/resource/android-template.zip simulator/Solar2D/Resources/Native/Corona/android/resource/
          tar -xvzf Native/CoronaNative.tar.gz CoronaEnterprise/Corona/android/lib/gradle/Corona.aar
          mkdir -p simulator/Solar2D/Resources/Native/Corona/android/lib/gradle
          cp -v CoronaEnterprise/Corona/android/lib/gradle/Corona.aar simulator/Solar2D/Resources/Native/Corona/android/lib/gradle/
      - name: Put Linux Simulator in place
        run: |
         mkdir -p output
         cd simulator
         tar -czvf ../output/CoronaSimulator-x86-64.tgz ./
      - name: Upload Linux Simulator artifact
        uses: actions/upload-artifact@v1
        with:
          name: Simulator-Linux
          path: ./output/CoronaSimulator-x86-64.tgz
